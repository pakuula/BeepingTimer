<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/myapplication/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/myapplication/MainActivity.kt" />
              <option name="originalContent" value="package com.example.myapplication&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import com.example.myapplication.ui.theme.MyApplicationTheme&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            MyApplicationTheme {&#10;                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;                    Greeting(&#10;                        name = &quot;Android&quot;,&#10;                        modifier = Modifier.padding(innerPadding)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun Greeting(name: String, modifier: Modifier = Modifier) {&#10;    Text(&#10;        text = &quot;Hello $name!&quot;,&#10;        modifier = modifier&#10;    )&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun GreetingPreview() {&#10;    MyApplicationTheme {&#10;        Greeting(&quot;Android&quot;)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.myapplication&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import com.example.myapplication.ui.theme.MyApplicationTheme&#10;import androidx.compose.ui.unit.dp&#10;&#10;// Таймерная модель&#10;data class TimerPreset(&#10;    val title: String,&#10;    val secondsPerRep: Int,&#10;    val reps: Int,&#10;    val restSeconds: Int,&#10;    val sets: Int&#10;)&#10;&#10;val timerPresets = listOf(&#10;    TimerPreset(&quot;6 сек/8 повторов/50 сек/4 подхода&quot;, 6, 8, 50, 4),&#10;    TimerPreset(&quot;8 сек/6 повторов/50 сек/4 подхода&quot;, 8, 6, 50, 4),&#10;    TimerPreset(&quot;6 сек/8 повторов/8 сек/8 подходов&quot;, 6, 8, 8, 8),&#10;    TimerPreset(&quot;8 сек/6 повторов/8 сек/8 подходов&quot;, 8, 6, 8, 8)&#10;)&#10;&#10;@Composable&#10;fun TimerList(onPresetClick: (TimerPreset) -&gt; Unit) {&#10;    Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {&#10;        timerPresets.forEach { preset -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .clickable { onPresetClick(preset) },&#10;                elevation = CardDefaults.cardElevation(4.dp)&#10;            ) {&#10;                Text(text = preset.title, modifier = Modifier.padding(16.dp))&#10;            }&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;        }&#10;    }&#10;}&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            MyApplicationTheme {&#10;                Surface(modifier = Modifier.fillMaxSize()) {&#10;                    TimerList { preset -&gt;&#10;                        val intent = Intent(this, ExerciseActivity::class.java).apply {&#10;                            putExtra(&quot;secondsPerRep&quot;, preset.secondsPerRep)&#10;                            putExtra(&quot;reps&quot;, preset.reps)&#10;                            putExtra(&quot;restSeconds&quot;, preset.restSeconds)&#10;                            putExtra(&quot;sets&quot;, preset.sets)&#10;                        }&#10;                        startActivity(intent)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>